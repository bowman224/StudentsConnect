<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				layout="vertical"
				minWidth="600"
				minHeight="600"
				horizontalAlign="left"
				applicationComplete="connectToServer()"
				backgroundColor="#FFFFFF">
	
	
	<mx:HBox>
		<mx:Label text="Currently chatting with:" fontFamily="Arial" fontWeight="bold" fontSize="16" color="#00B5E5"/>
		<mx:Text text="" id="chat_target" color="#C5C5C5" fontSize="14" />
	</mx:HBox>
	
	
	<mx:HBox id="VideoArea">
		<mx:VideoDisplay id="playVideoBox"
						 creationComplete="localCreated()"
						 height="240"
						 width="320"
						 backgroundAlpha="0"
						 borderStyle="solid"
						 borderThickness="4"
						 themeColor="#00B5E5"
						 cornerRadius="11"
						 borderColor="#00B5E5"/>
		<mx:VideoDisplay id="publishVideoBox"
						 height="120"
						 width="160"
						 backgroundAlpha="0"
						 themeColor="#00B5E5"
						 borderStyle="solid"
						 borderThickness="4"
						 cornerRadius="11"
						 borderColor="#00B5E5"/>
	</mx:HBox>
	
	<mx:HBox>
		<mx:Label text="Select your camera" fontFamily="Arial" fontWeight="bold" fontSize="16" color="#00B5E5"/>
		<mx:Panel id="panel" title="Installed cameras:" status="{camerasList.dataProvider.length} camera(s)">
			<mx:List id="camerasList" dataProvider="{Camera.names}" width="120" height="60" itemClick="selectCamera();" />
		</mx:Panel>
		<mx:VBox width="250" height="100%">
			<mx:HBox>
				<mx:Button label="Connect" click="connectToServer()" enabled="{nc == null}"/>
				<mx:Button label="Disconnect" click="close()" enabled="{nc != null}"/>
			</mx:HBox>
			<mx:HBox>
				<mx:Button label="End Chat" click="closeStream()" enabled="{nsPub != null &amp;&amp; nsPlay != null}"/>
			</mx:HBox>
		</mx:VBox>
	</mx:HBox>
	
	<mx:Button id="show_hide_log" label="Debug" click="showHideLog(log)" />
	<mx:TextArea id="log" width="600" height="50" visible="false" />
	
	
	<mx:Script>
		<![CDATA[
			import flash.media.Camera;
			import flash.system.Security;
			
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.utils.UIDUtil;
			
			
			[Bindable] private var nc:NetConnection;
			[Bindable] private var nsPub:NetStream;
			[Bindable] private var nsPlay:NetStream;
			private var playVideo:Video;
			private var current_camera:Camera;
			private var isValid:Boolean;
			private var myChatID:String;
			private var targetChatID:String;
			private var chatServer:String = "rtmp://theinternetisyourfriend.com/studentsconnect";
			
			
			private function connectToServer():void {
				
				ExternalInterface.addCallback("connectToTarget",connectToTarget);
				
				if (Camera.names.length == 0) {
					Alert.show("You do not have any cameras attached.");
					camerasList.enabled = false;
				}
				else {
					
					NetConnection.defaultObjectEncoding = ObjectEncoding.AMF0; // MUST SUPPLY THIS!!!
					
					if (nc == null) {
						nc = new NetConnection();
						nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler, false, 0, true);
						nc.addEventListener(IOErrorEvent.IO_ERROR, errorHandler, false, 0, true);
						nc.addEventListener(SecurityErrorEvent.SECURITY_ERROR, errorHandler, false, 0, true);
						nc.addEventListener(AsyncErrorEvent.ASYNC_ERROR, errorHandler, false, 0, true);
						
						debug('connect() ' + chatServer);
						nc.connect(chatServer);
					}
					selectCamera();
				}
			}
			
			
			private function selectCamera():void {
				var camera_index:String = null;
				if (camerasList.selectedIndex.toString() != '-1') {
					camera_index = camerasList.selectedIndex.toString();
				}
				debug('select camera');
				current_camera = Camera.getCamera(camera_index);
				publishVideoBox.attachCamera(current_camera);
			}
			
			
			private function connectToTarget(self_id:String,target_id:String,target_name:String,target_school:String,target_language:String):void {
				
				chat_target.text = "Name: " + target_name + " | School: " + target_school + " | Language: " + target_language;			
				publish(self_id);
				play(target_id);
				debug("publish: " + self_id + ", play: " + target_id);
				
			}
			
			
			
			private function close():void {
				debug('close()');
				if (nc != null) {
					nc.close();
					nc = null;
					closeStream();
				}
			}
			
			
			
			private function publish(name:String):void {
				if (nsPub == null && nc != null && nc.connected) {
					nsPub = new NetStream(nc);
					nsPub.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler, false, 0, true);
					nsPub.addEventListener(IOErrorEvent.IO_ERROR, streamErrorHandler, false, 0, true);
					nsPub.addEventListener(AsyncErrorEvent.ASYNC_ERROR, streamErrorHandler, false, 0, true);
					
					debug('publish -' + name);
					nsPub.publish(name);
					nsPub.attachAudio(Microphone.getMicrophone(-1));
					nsPub.attachCamera(current_camera);
				}
			}
			
			private function play(name:String):void {
				if (nsPlay == null && nc != null && nc.connected) {
					nsPlay = new NetStream(nc);
					nsPlay.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler, false, 0, true);
					nsPlay.addEventListener(IOErrorEvent.IO_ERROR, streamErrorHandler, false, 0, true);
					nsPlay.addEventListener(AsyncErrorEvent.ASYNC_ERROR, streamErrorHandler, false, 0, true);
					nsPlay.play(name);
					debug('play - ' + name);
					
					playVideo.attachNetStream(nsPlay);
				}
			}
			
			private function closeStream():void {
				if (nsPub != null && nsPlay != null) {
					nsPub.close();
					nsPub = null;
					nsPlay.close();
					nsPlay = null;
				}
				playVideo.clear();
				chat_target.text = "";
				ExternalInterface.call('alert', 'chat ended!');
			}
			
			private function netStatusHandler(event:NetStatusEvent):void {
				debug('netStatusHandler() ' + event.type + ' ' + event.info.code);
				switch (event.info.code) {
					case 'NetConnection.Connect.Success':
						break;
					case 'NetConnection.Connect.Failed':
					case 'NetConnection.Connect.Reject':
					case 'NetConnection.Connect.Closed':
						nc = null;
						closeStream();
						break;
				}
			}
			
			private function errorHandler(event:ErrorEvent):void {
				debug('errorHandler() ' + event.type + ' ' + event.text);
				if (nc != null)
					nc.close();
				nc = null;
				closeStream();
			}
			
			private function streamErrorHandler(event:ErrorEvent):void {
				debug('streamErrorHandler() ' + event.type + ' ' + event.text);
				closeStream();
			}
			
			private function debug(msg:String):void {
				if (log != null)
					log.text += msg + '\n';
			}
			
			
			private function localCreated(): void {
				
				var ui:UIComponent = new UIComponent();
				ui.width = 320;
				ui.height = 240;

				playVideo = new Video();
				playVideo.width = 312;
				playVideo.height = 232;
				playVideo.x = 4;
				playVideo.y = 4;
				
				ui.addChild(playVideo);
				debug('localcreated -playvideo');
								
				this.playVideoBox.addChild(ui);
			}
			
			
			
			private function showHideLog(log:TextArea):void {
				if (log.visible == true) {
					log.visible = false;
				}
				else {
					log.visible = true;
				}
			}
			
			
			
			
		]]>
	</mx:Script>
</mx:Application>
