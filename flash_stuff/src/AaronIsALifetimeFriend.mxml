<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" minWidth="600" minHeight="600" horizontalAlign="left" applicationComplete="getChatIDAndConnect()" backgroundColor="#FFFFFF">
    
	<mx:EmailValidator source="{email_address}"
					   property="text"
					   id="email_validator" 
					   valid="debug('Validation Succeeded!')"
					   trigger="{email_address}"
					   triggerEvent="change"
					   required="true"/>
	
	<mx:HBox>
		<mx:Label text="Who do you want to chat with?" fontFamily="Arial" fontWeight="bold" fontSize="16" color="#00B5E5"/>
		<mx:TextInput id="email_address" toolTip="email address (user@domain.com)" enabled="{nsPub == null &amp;&amp; nsPlay == null}"/>
		<mx:Button id="connect_button" label="Connect" click="connect(chatSession)" enabled="{nsPub == null &amp;&amp; nsPlay == null &amp;&amp; 
				   EmailValidator.validateEmail(email_validator, email_address.text, 'text').pop() == null}"/>
		<mx:Button label="End Chat" click="close()" enabled="{nsPub != null &amp;&amp; nsPlay != null}"/>
	</mx:HBox>
	<mx:Text text="" id="chat_session" color="#C5C5C5"/>
	
	<mx:HBox id="VideoArea">
		<mx:VideoDisplay id="playVideoBox" creationComplete="localCreated(playVideoBox, VideoArea)" height="240" width="320" backgroundAlpha="0" borderStyle="solid" borderThickness="4" themeColor="#00B5E5" cornerRadius="11" borderColor="#00B5E5"/>
		<mx:VideoDisplay id="publishVideoBox" creationComplete="localCreated(publishVideoBox, VideoArea)" height="120" width="160" backgroundAlpha="0" themeColor="#00B5E5" borderStyle="solid" borderThickness="4" cornerRadius="11" borderColor="#00B5E5"/>
	</mx:HBox>
	
	<mx:Button id="show_hide_log" label="Debug" click="showHideLog(log)" />
	<mx:TextArea id="log" width="600" height="150" visible="false" />
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.utils.UIDUtil;

			
			[Bindable] private var nc:NetConnection;
			[Bindable] private var nsPub:NetStream;
			[Bindable] private var nsPlay:NetStream;
			private var publishVideo:Video;
			private var playVideo:Video;
			private var isValid:Boolean;
			private var chatSession:String;
			private var chatServer:String = "rtmp://theinternetisyourfriend.com/studentsconnect";
			
			
			private function connect(session:String):void {
					if (session == null) {
						generateChatSessionID();
						chat_session.text = "Your session ID is: " + chatSession;
						
						publish(chatSession)
						play(chatSession + "2")
					}
					else {
						chat_session.text = "Your session ID is: " + chatSession;
						
						publish(chatSession + "2")
						play(chatSession)
					}
			}
			
			private function generateChatSessionID():void {
				chatSession = UIDUtil.createUID();
			}
			private function queryChatID():void {
				debug(chatSession);
			}
			
			
			private function getChatIDAndConnect():void {
								
				var varName:String;
				var paramObj:Object = LoaderInfo(this.root.loaderInfo).parameters;
				for (varName in paramObj) {
					if (varName == "id") {
						chatSession = String(paramObj[varName]);
					}
					
				}
				
				NetConnection.defaultObjectEncoding = ObjectEncoding.AMF0; // MUST SUPPLY THIS!!!
				
				if (nc == null) {
					nc = new NetConnection();
					nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler, false, 0, true);
					nc.addEventListener(IOErrorEvent.IO_ERROR, errorHandler, false, 0, true);
					nc.addEventListener(SecurityErrorEvent.SECURITY_ERROR, errorHandler, false, 0, true);
					nc.addEventListener(AsyncErrorEvent.ASYNC_ERROR, errorHandler, false, 0, true);
					
					debug('connect() ' + chatServer);
					nc.connect(chatServer);
				}
			}
			
			
			private function close():void {
				debug('close()');
				if (nc != null) {
					nc.close();
					nc = null;
					closeStream();
				}
			}
			
			private function publish(name:String):void {
				if (nsPub == null && nc != null && nc.connected) {
					nsPub = new NetStream(nc);
					nsPub.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler, false, 0, true);
					nsPub.addEventListener(IOErrorEvent.IO_ERROR, streamErrorHandler, false, 0, true);
					nsPub.addEventListener(AsyncErrorEvent.ASYNC_ERROR, streamErrorHandler, false, 0, true);

					nsPub.publish(name);
					publishVideoBox.attachCamera(Camera.getCamera());
					nsPub.attachCamera(Camera.getCamera());
					nsPub.attachAudio(Microphone.getMicrophone(-1));

					publishVideo.attachNetStream(nsPub);
				}
			}
			
			private function play(name:String):void {
				if (nsPlay == null && nc != null && nc.connected) {
					nsPlay = new NetStream(nc);
					nsPlay.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler, false, 0, true);
					nsPlay.addEventListener(IOErrorEvent.IO_ERROR, streamErrorHandler, false, 0, true);
					nsPlay.addEventListener(AsyncErrorEvent.ASYNC_ERROR, streamErrorHandler, false, 0, true);
					nsPlay.play(name);
					
					playVideo.attachNetStream(nsPlay);
				}
			}
			
			private function closeStream():void {
				if (nsPub != null && nsPlay != null) {
					nsPub.close();
					nsPub = null;
					nsPlay.close();
					nsPlay = null;
				}
				publishVideo.clear();
				playVideo.clear();
				publishVideoBox.attachCamera(null);
				playVideoBox.attachCamera(null);
			}
			
			private function netStatusHandler(event:NetStatusEvent):void {
				debug('netStatusHandler() ' + event.type + ' ' + event.info.code);
				switch (event.info.code) {
					case 'NetConnection.Connect.Success':
						break;
					case 'NetConnection.Connect.Failed':
					case 'NetConnection.Connect.Reject':
					case 'NetConnection.Connect.Closed':
						nc = null;
						closeStream();
						break;
				}
			}
			
			private function errorHandler(event:ErrorEvent):void {
				debug('errorHandler() ' + event.type + ' ' + event.text);
				if (nc != null)
					nc.close();
				nc = null;
				closeStream();
			}
			
			private function streamErrorHandler(event:ErrorEvent):void {
				debug('streamErrorHandler() ' + event.type + ' ' + event.text);
				closeStream();
			}
			
			private function debug(msg:String):void {
				if (log != null)
					log.text += msg + '\n';
			}
			
			private function localCreated(video_box:VideoDisplay, video_area:HBox):void {
				var ui:UIComponent = new UIComponent();
				var video:Video;
				video = new Video();
				ui.width = 320;
				ui.height = 240;
				if (video_box == playVideoBox) {
					playVideo = video;
					ui.addChild(playVideo);
				}
				else {
					publishVideo = video;
					ui.addChild(publishVideo);
				}
				video_area.addChild(ui);
			}
			
			private function showHideLog(log:TextArea):void {
				if (log.visible == true) {
					log.visible = false;
				}
				else {
					log.visible = true;
				}
			}

			


		]]>
	</mx:Script>
</mx:Application>
